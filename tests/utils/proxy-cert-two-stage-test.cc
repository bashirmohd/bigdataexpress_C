#include <iostream>

#include <getopt.h>

#include "utils/proxy-cert.h"
#include "proxy-cert-test-creds.h"

static void show_usage(const char * const prog)
{
    std::cout << "Usage: " << prog << " [args]\n\n"
              << "where [args] may be: \n\n"
              << "  -h, -?, --help, --usage: \t Show usage\n"
              << "  -n, --name [ARG]:        \t Common name\n"
              << "  -a, --algo [ARG]:        \t Signing algorithm\n\n";
}

int main(int argc, char *argv[])
{
    std::string common_name;
    std::string signing_algorithm = "sha256";

    while (true)
    {
        static struct option long_options[] = {
            { "help",    no_argument,       0, 'h' },
            { "usage",   no_argument,       0, '?' },
            { "cn",      required_argument, 0, 'n' },
            { "algo",    required_argument, 0, 'a' },
            { 0, 0, 0, 0 }
        };

        int optind = 0;
        int c      = getopt_long(argc, argv, "h?n:a:", long_options, &optind);

        if (c == -1)
            break;

        switch (c)
        {
        case 'h':
        case '?':
            show_usage(argv[0]);
            exit(0);
        case 'n':
            common_name = optarg;
            break;
        case 'a':
            signing_algorithm = optarg;
            break;
        default:
            abort();
        }
    }

    auto kc = utils::generate_keypair_and_csr(common_name, signing_algorithm);

    std::cout << "[test] proxy priv key:\n"
              << kc.proxy_private_key << "\n";

    std::cout << "[test] proxy public key:\n"
              << kc.proxy_public_key << "\n";

    utils::print_x509_req_info(kc.signing_request);

    auto cert = utils::sign_proxy_csr(test_issuer_key_nopass,
                                      test_issuer_cert,
                                      kc.signing_request);

    std::cout << "[test] signed certificate:\n"
              << cert << "\n";

    auto cert2 = utils::sign_proxy_csr(test_issuer_key_nopass,
            test_issuer_cert,
            test_csr);

    std::cout << "[test] signed certificate from csr generated by third party: \n"
              << cert2 << "\n";

    std::cout << "[test] certificate info:\n";
    utils::print_x509_info(cert);

    return 0;
}

// Local Variables:
// mode: c++
// c-basic-offset: 4
// End:

